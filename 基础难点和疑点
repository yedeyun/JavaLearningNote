1 👉基础👈
1.1💕正确使用 equals 方法💕
Object类的equals 方法容易抛出空指针异常, 应该使用常量或确定有值的对象的引用调用equals
不能使用一个值为null的引用类型来指向非静态的方法,否则会抛出异常
String str = null;
str.equals("dd")> 改 >"dd".equals(str) > 改 > Objects.equals(str,"dd")
总结如下:
每种原始类型都有默认值一样，如int默认值为 0，boolean 的默认值为 false，null 是任何引用类型的默认值，不严格的说是所有 Object 类型的默认值。
可以使用 == 或者 != 操作来比较null值，但是不能使用其他算法或者逻辑操作。在Java中null == null将返回true。
不能使用一个值为null的引用类型变量来调用非静态方法，否则会抛出异常
关于null 值的说明
1、null是Java中的关键字，像public、static、final。它是大小写敏感的，你不能将null写成Null或NULL，编译器将不能识别它们然后报错。
2、就像每种原始类型都有默认值一样，如int默认值为0，boolean的默认值为false，null是任何引用类型的默认值，不严格的说是所有object类型的默认值。
就像你创建了一个布尔类型的变量，它将false作为自己的默认值，Java中的任何引用变量都将null作为默认值。这对所有变量都是适用的，如成员变量、局部
变量、实例变量、静态变量（但当你使用一个没有初始化的局部变量，编译器会警告你）。为了证明这个事实，你可以通过创建一个变量然后打印它的值来观察
这个引用变量。
3、null既不是对象也不是一种类型，它仅是一种特殊的值，你可以将其赋予任何引用类型，你也可以将null转化成任何类型。
4、null可以赋值给引用变量，你不能将null赋给基本类型变量，例如int、double、float、boolean。如果你那样做了，编译器将会报错。
5、任何含有null值的包装类在Java拆箱生成基本数据类型时候都会抛出一个空指针异常。（例如Integer拆箱成int时）
6、如果使用了带有null值的引用类型变量，instanceof操作将会返回false。（instanceof：用来在运行时指出对象是否是特定类的一个实例，例如：Integer
num = null，那么，调用 num instanceof Integer时会返回false）
7、不能调用非静态方法来使用一个值为null的引用类型变量，它将会抛出空指针异常；可以使用静态方法来使用一个值为null的引用类型变量，因为静态方法使用
静态绑定，不会抛出空指针异常。
8、你可以使用==或者!=操作来比较null值，但是不能使用其他算法或者逻辑操作，例如小于或者大于。跟SQL不一样，在Java中null==null将返回true。

1.2💕整型包装类值的比较💕
整形包装类的对象值的比较必须使用equals方法
原因为: 有自动装箱和int基本类型值在-128至127 有关.

1.3.💕 BigDecimal💕
浮点数之间的等值判断,基本数据类型不能用 == 来比较, 包装数据类型不能用 equals 来判断, 具体原理和浮点数的编码方式有关.
解决这一问题办法就是: 使用使用 BigDecimal 来定义浮点数的值，再进行浮点数的运算操作, 
使用 BigDecimal 的equals
大小的比较使用 compareTo() 返回-1 表示小于,0表示等于,1 表示大于.
保留几位小数 使用 setScale 
防止精度损失 请使用BigDecimal(String)构造方法.
总结:BigDecimal 主要用来操作(大)浮点数,BigInteger 主要用来操作(大)整数 超过long类型.
BigDecimal 实现了BigInteger .不同要BigDecimal 加入了小数位.

1.4 💕基本数据类型与包装数据类型的使用标准.💕
[强制] 所有的POJO(和数据表类有关)类属性必须使用包装数据类型.--Plan Ordinary Java Object 普通JavaBeans
[强制] RPC方法的返回值和参数使用包装数据类型. --Remote Procedure Call 远程过程调用
[推荐] 所有局部变量使用基本数据类型.

2👉集合👈

2.1💕 Arrays.asList()使用指南💕
2.1.1 简介
Arrays.asList 将一个数组转为一个List 集合.
固定大小的列表,基于数组和基于集合的API之间的桥梁,Collection.toArray()结合使用
底层其实还是数组
返回是一个Arrays内部类(class java.util.Arrays$ArrayList),没有实现集合里的修改方法,add/remove/clear
class java.util.Arrays$ArrayList 重写的方法: get/set/indexOf/contains/forEach/replaceAll/sort
传递的数组必须是对象数组,而 不是基本类型 因为是泛型方法<T>
如果传入是一个原生数据类型数组时,真正得到的参数不是数组中的元素, 而是数组对象本身.此时List 唯一元素就是这个数组.使用包装类型就可以解决这个问题.
2.1.2 如果正确将数组转换为ArrayList
1 自己动手现实
2最简单方法:List list = new ArrayList<>(Arrays.asList("a", "b", "c"))
3使用JAVA 8 的Stream(推荐)
List myList = Arrays.stream(myArray).collect(Collectors.toList());
基本类型也可以
List myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());
4使用Guava(推荐)
对于不可变集合，你可以使用ImmutableList类及其of()与copyOf()工厂方法
对于可变集合,你可以使用Lists类及其newArrayList()工厂方法
5使用 Apache Commons Collections

2.2 💕Collection.toArray() 方法使用的坑&如何反转数组💕
s=list.toArray(new String[0]);//没有指定类型的话会报错
2.3. 💕不要在 foreach 循环里进行元素的 remove/add 操作💕












